{"version":3,"sources":["components/color-swatch/ColorSwatch.js","components/detail-view/DetailView.js","components/navigation/TopNav.js","components/pagination/Pagination.js","components/list-view/ListView.js","util/hexToHSL.js","util/generateColorFamily.js","App.js","util/generateHexColors.js","components/navigation/SideNav.js","serviceWorker.js","index.js"],"names":["ColorSwatch","props","className","currentColors","map","color","index","key","id","detailsView","to","pathname","state","comingFromSelected","colorSelected","style","backgroundColor","DetailView","selectedColor","location","randomIndex","Math","floor","random","colors","length","selectRandomColor","onClick","callback","comingFromClear","TopNav","type","placeholder","onChange","event","window","searchValue","target","value","newColors","originalHexColors","forEach","includes","push","onKeyPress","test","validateColor","history","alert","Pagination","pageNumbers","pages","ceil","totalColors","colorsPerPage","useState","pageNumberSelected","setPageNumberSelected","i","paginate","number","ListView","currentPage","setCurrentPage","indexOfLastPost","indexOfFirstPost","slice","pageNumber","hexToHSL","H","r","g","b","cmin","min","cmax","max","delta","h","l","round","abs","toFixed","generateColorFamily","hexCode","colorFamily","colorHue","colorSaturation","colorBrightness","createHistory","App","generatedColors","possibleHexValues","hexArray","HSLObject","undefined","generateHexColors","originalColorObject","setColors","resetOriginalColors","colorInput","SideNav","exact","path","render","updateColors","eval","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc2de095.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './ColorSwatch.css'\n\nconst ColorSwatch = props => {\n  return (\n    <div className=\"content-container\">\n      {props.currentColors.map((color, index) => (\n        <Link\n          key={index}\n          id={props.detailsView ? 'swatch-detail-view' : ''}\n          className=\"swatches\"\n          to={{\n            pathname: '/details',\n            state: { comingFromSelected: true, colorSelected: color },\n          }}\n        >\n          <div\n            className=\"color-display\"\n            style={{ backgroundColor: `${color}` }}\n          ></div>\n          <p className=\"color-name\">{color}</p>\n        </Link>\n      ))}\n    </div>\n  )\n}\n\nexport default ColorSwatch\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport ColorSwatch from '../color-swatch/ColorSwatch'\nimport './DetailView.css'\n\nfunction DetailView(props) {\n  const selectedColor = props.location?.state?.comingFromSelected\n    ? [props.location.state.colorSelected]\n    : [selectRandomColor()]\n\n  function selectRandomColor() {\n    const randomIndex = Math.floor(Math.random() * props.colors.length)\n    return props.colors[randomIndex]\n  }\n\n  return (\n    <div className=\"detail-view-container\">\n      <ColorSwatch\n        id=\"swatch-detail-view\"\n        detailsView={true}\n        currentColors={selectedColor}\n      />\n      <Link\n        id=\"clear-button\"\n        onClick={() => props.callback()}\n        to={{ pathname: '/', state: { comingFromClear: true } }}\n      >\n        Clear\n      </Link>\n    </div>\n  )\n}\n\nexport default DetailView\n","import React from 'react'\nimport './TopNav.css'\nimport { history } from '../../App'\n\nconst TopNav = props => {\n  function validateColor(color) {\n    let regex = /^#(?:[0-9a-fA-F]{6})$/\n    return regex.test(color)\n  }\n\n  function handleChange(event) {\n    if (window.location.pathname !== '/details') {\n      const searchValue = event.target.value\n      let newColors = []\n      props.originalHexColors.forEach(color => {\n        if (color.includes(searchValue)) {\n          newColors.push(color)\n        }\n      })\n      props.callback(newColors)\n    }\n  }\n\n  function handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      const color = event.target.value\n\n      if (validateColor(color) === true) {\n        history.push({\n          pathname: '/details',\n          state: {\n            comingFromSelected: true,\n            colorSelected: color,\n          },\n        })\n      } else {\n        alert('Please Enter a Valid Hex Code example: #03badd')\n      }\n    }\n  }\n\n  return (\n    <div className=\"top-nav\">\n      <h1>Color Swatches</h1>\n      <input\n        id=\"search-button\"\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n      ></input>\n    </div>\n  )\n}\n\nexport default TopNav\n","import React, { useState } from 'react'\nimport './Pagination.css'\n\nconst Pagination = props => {\n  const pageNumbers = []\n  const pages = Math.ceil(props.totalColors / props.colorsPerPage)\n  const [pageNumberSelected, setPageNumberSelected] = useState(1)\n\n  for (let i = 0; i < pages; i++) {\n    pageNumbers.push(i + 1)\n  }\n\n  if (pageNumbers.length && !pageNumbers.includes(pageNumberSelected)) {\n    setPageNumberSelected(1)\n    props.paginate(1)\n  }\n\n  if (pageNumbers.length && !pageNumbers.includes(pageNumberSelected)) {\n    setPageNumberSelected(1)\n    props.paginate(1)\n  }\n\n  return (\n    <nav>\n      <ul id=\"page-numbers\">\n        {pageNumbers.map(number => (\n          <li\n            id={pageNumberSelected === number ? 'current-page' : ''}\n            className=\"page-number\"\n            key={number}\n            onClick={() => {\n              props.paginate(number)\n              setPageNumberSelected(number)\n            }}\n          >\n            {number}\n          </li>\n        ))}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Pagination\n","import React, { useState } from 'react'\nimport Pagination from '../pagination/Pagination'\nimport ColorSwatch from '../color-swatch/ColorSwatch'\n\nfunction ListView(props) {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [colorsPerPage] = useState(12)\n\n  const indexOfLastPost = currentPage * colorsPerPage\n  const indexOfFirstPost = indexOfLastPost - colorsPerPage\n  let currentColors = props.colors.slice(indexOfFirstPost, indexOfLastPost)\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber)\n  }\n\n  return (\n    <div>\n      <ColorSwatch currentColors={currentColors} />\n      <Pagination\n        colorsPerPage={colorsPerPage}\n        totalColors={props.colors.length}\n        paginate={paginate}\n      />\n    </div>\n  )\n}\n\nexport default ListView\n","// CREDIT: https://css-tricks.com/converting-color-spaces-in-javascript/\n\nexport default function hexToHSL(H) {\n  // Convert hex to RGB first\n  let r = 0,\n    g = 0,\n    b = 0\n  if (H.length === 4) {\n    r = '0x' + H[1] + H[1]\n    g = '0x' + H[2] + H[2]\n    b = '0x' + H[3] + H[3]\n  } else if (H.length === 7) {\n    r = '0x' + H[1] + H[2]\n    g = '0x' + H[3] + H[4]\n    b = '0x' + H[5] + H[6]\n  }\n  // Then to HSL\n  r /= 255\n  g /= 255\n  b /= 255\n  let cmin = Math.min(r, g, b),\n    cmax = Math.max(r, g, b),\n    delta = cmax - cmin,\n    h = 0,\n    s = 0,\n    l = 0\n\n  if (delta === 0) h = 0\n  else if (cmax === r) h = ((g - b) / delta) % 6\n  else if (cmax === g) h = (b - r) / delta + 2\n  else h = (r - g) / delta + 4\n\n  h = Math.round(h * 60)\n\n  if (h < 0) h += 360\n\n  l = (cmax + cmin) / 2\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1))\n  s = +(s * 100).toFixed(1)\n  l = +(l * 100).toFixed(1)\n\n  return [h, s, l]\n}\n","import hexToHSL from './hexToHSL'\n\nexport default function generateColorFamily(hexCode) {\n  const colorHue = hexToHSL(hexCode)[0]\n  const colorSaturation = hexToHSL(hexCode)[1]\n  const colorBrightness = hexToHSL(hexCode)[2]\n\n  let colorFamily\n\n  if (\n    ((colorHue >= 0 && colorHue <= 5) || colorHue > 340) &&\n    colorSaturation > 50 &&\n    colorBrightness > 20 &&\n    colorBrightness < 60\n  ) {\n    colorFamily = 'red'\n  }\n  if (\n    colorHue >= 50 &&\n    colorHue <= 70 &&\n    colorSaturation > 50 &&\n    colorBrightness > 20 &&\n    colorBrightness < 60\n  ) {\n    colorFamily = 'yellow'\n  }\n  if (\n    colorHue >= 110 &&\n    colorHue <= 130 &&\n    colorSaturation > 50 &&\n    colorBrightness > 20 &&\n    colorBrightness < 60\n  ) {\n    colorFamily = 'green'\n  }\n  if (\n    colorHue >= 170 &&\n    colorHue <= 190 &&\n    colorSaturation > 50 &&\n    colorBrightness > 20 &&\n    colorBrightness < 60\n  ) {\n    colorFamily = 'cyan'\n  }\n  if (\n    colorHue >= 230 &&\n    colorHue <= 250 &&\n    colorSaturation > 50 &&\n    colorBrightness > 20 &&\n    colorBrightness < 60\n  ) {\n    colorFamily = 'blue'\n  }\n  if (\n    colorHue >= 290 &&\n    colorHue <= 310 &&\n    colorSaturation > 50 &&\n    colorBrightness > 20 &&\n    colorBrightness < 60\n  ) {\n    colorFamily = 'magenta'\n  }\n  return colorFamily\n}\n","import React, { useState } from 'react'\nimport { BrowserRouter, Route, Router, Switch } from 'react-router-dom'\nimport DetailsView from './components/detail-view/DetailView'\nimport TopNav from './components/navigation/TopNav'\nimport SideNav from './components/navigation/SideNav'\nimport ListView from './components/list-view/ListView'\nimport generateHexColors from './util/generateHexColors'\nimport './App.css'\nimport createHistory from 'history/createBrowserHistory'\nexport const history = createHistory()\n\nfunction App(props) {\n  const generatedColors = generateHexColors()\n  const [originalHexColors] = useState(generatedColors[0])\n  const [originalColorObject] = useState(generatedColors[1])\n  const [colors, setColors] = useState(originalHexColors)\n\n  function resetOriginalColors() {\n    setColors(originalHexColors)\n  }\n\n  function colorInput(newColors) {\n    setColors(newColors)\n  }\n\n  if (props.comingFromClear) {\n    setColors(originalHexColors)\n  }\n\n  return (\n    <div id=\"main-container\">\n      <BrowserRouter>\n        <Router history={history}>\n          <TopNav callback={colorInput} originalHexColors={originalHexColors} />\n          <SideNav\n            callback={colorInput}\n            originalColorObject={originalColorObject}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={props => <ListView {...props} colors={colors} />}\n            />\n            <Route\n              exact\n              path=\"/details\"\n              render={props => (\n                <DetailsView\n                  {...props}\n                  callback={resetOriginalColors}\n                  colors={colors}\n                />\n              )}\n            />\n          </Switch>\n        </Router>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","import generateColorFamily from './generateColorFamily'\n\nexport default function generateHexColors() {\n  const possibleHexValues = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    5,\n    7,\n    8,\n    9,\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n  ]\n\n  const hexArray = []\n  const HSLObject = {}\n  const numberOfColors = 300\n  while (hexArray.length < numberOfColors) {\n    let hexCode = '#'\n    while (hexCode.length < 7) {\n      hexCode +=\n        possibleHexValues[Math.floor(Math.random() * possibleHexValues.length)]\n    }\n    if (!hexArray.includes(hexCode)) {\n      hexArray.push(hexCode)\n      if (HSLObject[generateColorFamily(hexCode)]) {\n        HSLObject[generateColorFamily(hexCode)].push(hexCode)\n      } else if (generateColorFamily(hexCode) !== undefined) {\n        HSLObject[generateColorFamily(hexCode)] = [hexCode]\n      }\n    }\n  }\n\n  return [hexArray, HSLObject]\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './SideNav.css'\nimport { history } from '../../App'\n\nconst SideNav = props => {\n  function updateColors(colorFamily) {\n    props.callback(eval(`props.originalColorObject.${colorFamily}`))\n  }\n\n  return (\n    <>\n      <div className=\"side-nav\">\n        <ul className=\"side-nav-list\">\n          <Link\n            to={{ pathname: '/details', state: { comingFromSelected: false } }}\n            id=\"random-color-button\"\n          >\n            Random Color\n          </Link>\n          <Link\n            onClick={() => updateColors('red')}\n            to={{ pathname: '/', state: { comingFromSelected: false } }}\n          >\n            Red\n          </Link>\n          <Link\n            onClick={() => updateColors('yellow')}\n            to={{ pathname: '/', state: { comingFromSelected: false } }}\n          >\n            Yellow\n          </Link>\n          <Link\n            onClick={() => updateColors('green')}\n            to={{ pathname: '/', state: { comingFromSelected: false } }}\n          >\n            Green\n          </Link>\n          <Link\n            onClick={() => updateColors('cyan')}\n            to={{ pathname: '/', state: { comingFromSelected: false } }}\n          >\n            Cyan\n          </Link>\n          <Link\n            onClick={() => updateColors('blue')}\n            to={{ pathname: '/', state: { comingFromSelected: false } }}\n          >\n            Blue\n          </Link>\n          <Link\n            onClick={() => updateColors('magenta')}\n            to={{ pathname: '/', state: { comingFromSelected: false } }}\n          >\n            Magenta\n          </Link>\n        </ul>\n      </div>\n\n      <div className=\"side-nav-mobile\">\n        <ul className=\"side-nav-list\">\n          <Link\n            to={{ pathname: '/details', state: { comingFromSelected: false } }}\n            id=\"random-color-button\"\n          >\n            Random Color\n          </Link>\n        </ul>\n      </div>\n    </>\n  )\n}\n\nexport default SideNav\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}